generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model setProfile {
  id             Int    @id @default(autoincrement())
  name           String
  surname        String
  schoolPosition String
  phoneNumber    String
  Email          String
}


model userLogin {
  id       Int    @id @default(autoincrement())
  login    String
  password String
  role     String
}

model userUsername {
  id       Int    @id @default(autoincrement())
  username String
}

model contacts {
  id             Int    @id @default(autoincrement())
  contact        Int
  location       String
  email          String
  appsAppStrore  String
  appsGooglePlay String
}

model contacts_smm {
  id   Int    @id @default(autoincrement())
  name String
  img  String
  url  String
}

model attendanceDate {
  id   Int    @id @default(autoincrement())
  date String
}

model attendancePupil {
  id  Int    @id @default(autoincrement())
  yes String
  no  String
}

model grade {
  id   Int    @id @default(autoincrement())
  name String
}

model adminrole {
  id   Int    @id @default(autoincrement())
  role String
}

model userrole {
  id   Int    @id @default(autoincrement())
  role String
}

// relations

model application {
  id      Int    @id @default(autoincrement())
  appname String
  message String
  system  String
  user    user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
}

model suggestion {
  id          Int    @id @default(autoincrement())
  Name        String
  suggestName String
  message     String
  sent_date   String
  user        user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model user {
  id           Int           @id @default(autoincrement())
  fullname     String
  login        String
  password     String
  role         String
  applications application[]
  suggestions  suggestion[]
  second_auth  second_auth[]
}


model second_auth {
  id          Int @id @default(autoincrement())
  user        user @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  password    String    
}

model newsPublish {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  date        String
  message     String
  category    category @relation(fields: [category_id], references: [id])
  category_id Int
}

model category {
  id   Int           @id @default(autoincrement())
  name String
  news newsPublish[]
}
